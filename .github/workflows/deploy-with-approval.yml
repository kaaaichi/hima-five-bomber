name: Deploy with Manual Approval

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Build Frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Build Backend
        working-directory: backend
        run: |
          npm ci
          npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist
          retention-days: 7

  request-approval:
    name: Request Deployment Approval
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production-approval
    steps:
      - name: Approval checkpoint
        run: echo "Deployment approved for commit ${{ github.sha }}"

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: request-approval
    permissions:
      id-token: write
      contents: read
    environment:
      name: production
      url: https://${{ secrets.CLOUDFRONT_DOMAIN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Frontend to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          aws s3 sync frontend/dist/ s3://$S3_BUCKET_NAME/ --delete

      - name: Invalidate CloudFront
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*"

      - name: Build and Deploy Backend
        env:
          ECR_REPOSITORY: five-bomber-backend
        run: |
          # ECRログイン
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

          # Dockerイメージビルド・プッシュ
          cd backend
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Lambda関数更新
          LAMBDA_FUNCTIONS=$(aws lambda list-functions \
            --query "Functions[?starts_with(FunctionName, 'five-bomber-')].FunctionName" \
            --output text)

          for FUNCTION in $LAMBDA_FUNCTIONS; do
            echo "Updating Lambda: $FUNCTION"
            aws lambda update-function-code \
              --function-name $FUNCTION \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
            aws lambda wait function-updated-v2 --function-name $FUNCTION
          done

      - name: Record deployment
        run: |
          echo "Deployment successful!"
          echo "Commit: ${{ github.sha }}"
          echo "Time: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "Deployed by: ${{ github.actor }}"
