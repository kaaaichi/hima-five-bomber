name: Deploy Application (Production)

on:
  workflow_dispatch: # 手動トリガー
  push:
    tags:
      - 'v*' # vX.X.X形式のタグでトリガー

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: five-bomber-backend
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  deploy-frontend:
    name: Deploy Frontend to S3 + CloudFront
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC用
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_GATEWAY_URL: ${{ secrets.VITE_API_GATEWAY_URL }}
          VITE_WEBSOCKET_URL: ${{ secrets.VITE_WEBSOCKET_URL }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: |
          aws s3 sync frontend/dist/ s3://${{ env.S3_BUCKET_NAME }}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html" \
            --exclude "*.json"

          # index.htmlは短期キャッシュ
          aws s3 cp frontend/dist/index.html s3://${{ env.S3_BUCKET_NAME }}/index.html \
            --cache-control "public, max-age=300, must-revalidate"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Notify deployment success
        if: success()
        run: echo "Frontend deployment successful!"

      - name: Notify deployment failure
        if: failure()
        run: echo "Frontend deployment failed!" && exit 1

  deploy-backend:
    name: Deploy Backend to Lambda (via ECR)
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC用
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Lambda functions
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Lambda関数の一覧を取得（タグでフィルタリング）
          LAMBDA_FUNCTIONS=$(aws lambda list-functions \
            --query "Functions[?starts_with(FunctionName, 'five-bomber-')].FunctionName" \
            --output text)

          # 各Lambda関数を更新
          for FUNCTION in $LAMBDA_FUNCTIONS; do
            echo "Updating Lambda function: $FUNCTION"
            aws lambda update-function-code \
              --function-name $FUNCTION \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # 更新完了まで待機
            aws lambda wait function-updated-v2 --function-name $FUNCTION
            echo "Successfully updated: $FUNCTION"
          done

      - name: Notify deployment success
        if: success()
        run: echo "Backend deployment successful!"

      - name: Notify deployment failure
        if: failure()
        run: echo "Backend deployment failed!" && exit 1
